# Generated by Django 5.2.2 on 2025-07-23 07:31

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('dataset', '0002_alter_dataset_dataset_type'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='dataset',
            name='file_size_mb',
            field=models.FloatField(default=0.0, help_text='File size in MB'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='has_documentation',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='dataset',
            name='is_premium',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='dataset',
            name='metadata_quality_score',
            field=models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='dataset',
            name='premium_price_usd',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Premium price in USD', max_digits=10, null=True),
        ),
        migrations.AddField(
            model_name='dataset',
            name='premium_token_discount',
            field=models.PositiveIntegerField(default=0, help_text='Token discount for premium datasets'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='quality_tier',
            field=models.CharField(choices=[('basic', 'Basic'), ('standard', 'Standard'), ('premium', 'Premium')], default='basic', max_length=10),
        ),
        migrations.AddField(
            model_name='dataset',
            name='token_cost',
            field=models.PositiveIntegerField(default=0, help_text='Cost in tokens to download'),
        ),
        migrations.CreateModel(
            name='PremiumPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(choices=[('usd_only', 'USD Only'), ('tokens_only', 'Tokens Only'), ('hybrid', 'USD + Tokens')], max_length=15)),
                ('usd_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('tokens_used', models.PositiveIntegerField(default=0)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=10)),
                ('stripe_payment_intent_id', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='premium_purchases', to='dataset.dataset')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='premium_purchases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'dataset')},
            },
        ),
        migrations.CreateModel(
            name='TokenTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('signup_bonus', 'Signup Bonus'), ('upload_bonus', 'Upload Bonus'), ('download_cost', 'Download Cost'), ('purchase', 'Token Purchase'), ('referral_bonus', 'Referral Bonus'), ('quality_bonus', 'Quality Bonus'), ('refund', 'Refund')], max_length=20)),
                ('amount', models.IntegerField(help_text='Positive for credits, negative for debits')),
                ('description', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dataset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='token_transactions', to='dataset.dataset')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Download',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tokens_spent', models.PositiveIntegerField(default=0)),
                ('is_premium_download', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='download_records', to='dataset.dataset')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to=settings.AUTH_USER_MODEL)),
                ('premium_purchase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dataset.premiumpurchase')),
            ],
            options={
                'unique_together': {('user', 'dataset')},
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bonus_awarded', models.BooleanField(default=False)),
                ('bonus_amount', models.PositiveIntegerField(default=25)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('referred_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals_received', to=settings.AUTH_USER_MODEL)),
                ('referrer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals_made', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('referrer', 'referred_user')},
            },
        ),
    ]
